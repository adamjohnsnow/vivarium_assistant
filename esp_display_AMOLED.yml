esphome:
  name: esphome-web-e86508
  friendly_name: Vivarium
  min_version: 2025.5.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_size: 16MB

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

# Enable logging
logger:

# Home Assistant API disabled when WiFi is off
api:
  encryption:
    key: "8WJ5tXb1DCDjglBGkLtdoTYyNrHyFNlyb6bnGrKKBpA="

# OTA disabled when WiFi is off - use USB for updates
ota:
  - platform: esphome
    password: "e552ee7b0b3ca8b2140911a5a8efaa32"

# WiFi disabled to eliminate ADC interference - update via USB
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

spi:
  id: quad_spi
  type: quad
  clk_pin: 47
  data_pins: [18, 7, 48, 5]

display:
  - platform: qspi_dbi
    id: my_display
    model: RM67162
    dimensions:
      height: 400
      width: 240
      offset_height: 136
    brightness: 200
    rotation: 90
    cs_pin: 6
    reset_pin: 17
    enable_pin: 38
    lambda: |-
      // Define colors
      auto color_black = Color(0, 0, 0);
      auto color_white = Color(255, 255, 255);
      auto color_red = Color(255, 0, 0);
      auto color_blue = Color(0, 150, 255);
      auto color_green = Color(100, 255, 100);
      auto color_orange = Color(255, 140, 0);
      
      // Clear screen
      it.fill(color_black);
      
      // Get sensor states from Home Assistant
      float humidity = 0;
      float heat_output = 0;
      bool tank_high = false;
      bool tank_low = false;
      
      if (id(humidity_sensor).has_state()) {
        humidity = id(humidity_sensor).state;
      }
      if (id(heat_output_sensor).has_state()) {
        heat_output = (id(heat_output_sensor).state / 255.0) * 100.0; // Convert brightness (0-255) to percentage (0-100)
      }
      if (id(tank_high_sensor).has_state()) {
        tank_high = id(tank_high_sensor).state;
      }
      if (id(tank_low_sensor).has_state()) {
        tank_low = id(tank_low_sensor).state;
      }
      
      // Calculate mister fill percentage and color
      float mister_fill = 0.05; // Default 5%
      Color mister_color = color_red;
      
      if (tank_high) {
        mister_fill = 1.0; // 100%
        mister_color = color_blue;
      } else if (tank_low) {
        mister_fill = 0.5; // 50%
        mister_color = color_blue;
      }
      
      // Draw MISTER bar (top)
      int bar_y = 20;
      int bar_width = 300;
      int bar_height = 60;
      int bar_x = 0;
      
      // White outline
      it.rectangle(bar_x, bar_y, bar_width, bar_height, color_white);
      it.rectangle(bar_x + 1, bar_y + 1, bar_width - 2, bar_height - 2, color_white);
      
      // Fill bar based on tank levels
      int fill_width = (int)((bar_width - 4) * mister_fill);
      if (fill_width > 0) {
        it.filled_rectangle(bar_x + 2, bar_y + 2, fill_width, bar_height - 4, mister_color);
      }
      
      // Label
      it.print(bar_x + bar_width + 20, bar_y + 20, id(font_medium), color_white, "TANK");
      
      // Draw HUMIDITY bar (middle)
      bar_y = bar_y + 80;
      
      // White outline
      it.rectangle(bar_x, bar_y, bar_width, bar_height, color_white);
      it.rectangle(bar_x + 1, bar_y + 1, bar_width - 2, bar_height - 2, color_white);
      
      // Fill bar based on humidity percentage
      fill_width = (int)((bar_width - 4) * (humidity / 100.0));
      if (fill_width > 0) {
        it.filled_rectangle(bar_x + 2, bar_y + 2, fill_width, bar_height - 4, color_green);
      }
      it.printf(bar_x + 20, bar_y + 13, id(font_bold), color_black, "%.0f", humidity);
      
      // Label
      it.print(bar_x + bar_width + 20, bar_y + 20, id(font_medium), color_white, "HUM");
      
      // Draw HEAT bar (bottom)
      bar_y = bar_y + 80;

      // White outline
      it.rectangle(bar_x, bar_y, bar_width, bar_height, color_white);
      it.rectangle(bar_x + 1, bar_y + 1, bar_width - 2, bar_height - 2, color_white);
      
      // Fill bar based on heat output percentage
      fill_width = (int)((bar_width - 4) * (heat_output / 100.0));
      if (fill_width > 0) {
        it.filled_rectangle(bar_x + 2, bar_y + 2, fill_width, bar_height - 4, color_orange);
      }

      it.printf(bar_x + 20, bar_y + 13, id(font_bold), color_black, "%.0f", heat_output);

      // Label
      it.print(bar_x + bar_width + 20, bar_y + 20, id(font_medium), color_white, "HEAT");

# Home Assistant sensors
sensor:
  - platform: homeassistant
    id: humidity_sensor
    entity_id: sensor.vivariumsensors_humidity
    internal: true
  - platform: homeassistant
    id: heat_output_sensor
    entity_id: light.heat_lamp_power
    attribute: brightness
    internal: true

binary_sensor:
  - platform: homeassistant
    id: tank_high_sensor
    entity_id: binary_sensor.vivariumsensors_tank_high_level
    internal: true
  - platform: homeassistant
    id: tank_low_sensor
    entity_id: binary_sensor.vivariumsensors_tank_low_level
    internal: true

# Update display every 2 seconds
interval:
  - interval: 2s
    then:
      - component.update: my_display

# Fonts
font:
  - file: "gfonts://Roboto"
    id: font_small
    size: 18
  - file: "gfonts://Roboto"
    id: font_medium
    size: 30
  - file: "gfonts://Roboto"
    id: font_header
    size: 45
  - file: "gfonts://Roboto@900"
    id: font_bold
    size: 30
