esphome:
  name: vivsensor320
  friendly_name: VivariumII
  min_version: 2025.5.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_size: 16MB

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "6b/aM1kv5AO7QxCHrUNSwmBTTMHqumrld3cIjFkHsgg="

ota:
  - platform: esphome
    password: "45729663d51cd36a476d62ffa87f19ff"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Viv3 Fallback Hotspot"
    password: "FqYYZgJOn9Mg"

captive_portal:

spi:
  clk_pin: GPIO39
  mosi_pin: GPIO38
  
sensor:
  - platform: adc
    pin: GPIO4
    name: "UV Raw Voltage"
    id: uv_raw_voltage
    update_interval: 3s
    attenuation: auto
    unit_of_measurement: "V"
    accuracy_decimals: 10
  - platform: homeassistant
    id: dimmer_percent
    entity_id: input_number.vivarium_dimmer_percent
  - platform: homeassistant
    id: bask_temp
    entity_id: sensor.vivariumsensors_basking_temperature
  - platform: homeassistant
    id: humidity
    entity_id: sensor.vivariumsensors_humidity
  - platform: homeassistant
    id: mid_temp
    entity_id: sensor.vivariumsensors_middle_temperature
  - platform: homeassistant
    id: base_temp
    entity_id: sensor.vivariumsensors_substrate_temperature

text_sensor:
  - platform: homeassistant
    id: lighting_status
    entity_id: input_select.terrasky_last_action

binary_sensor:
  - platform: homeassistant
    id: fan_power
    entity_id: switch.fan_power
  - platform: homeassistant
    id: fogger_power
    entity_id: switch.fogger_power
  - platform: homeassistant
    id: mister_power
    entity_id: switch.mister_power

display:
  - platform: st7789v
    id: my_display
    model: CUSTOM
    width: 240
    height: 320
    offset_height: 0
    offset_width: 0
    cs_pin: 45
    dc_pin: 42
    reset_pin: 0
    backlight_pin: 1
    rotation: 270
    update_interval: 100ms  # Fast updates for smooth animation
    lambda: |-
      it.printf(14, 10, id(Roboto), Color(255, 255, 255), "VIVARIUM");
      it.printf(14, 45, id(Roboto_14), Color(255, 255, 255), "BASKING");
      it.printf(14, 100, id(Roboto_14), Color(255, 255, 255), "CENTRAL");
      it.printf(14, 156, id(Roboto_14), Color(255, 255, 255), "LOWER");
      it.printf(115, 45, id(Roboto_14), Color(255, 255, 255), "HUMIDITY");
      it.printf(115, 100, id(Roboto_14), Color(255, 255, 255), "HEAT");
      it.printf(115, 156, id(Roboto_14), Color(255, 255, 255), "UV");

      it.printf(75, 64, id(Roboto_14), Color(255, 255, 255), "°C");
      it.printf(75, 122, id(Roboto_14), Color(255, 255, 255), "°C");
      it.printf(75, 180, id(Roboto_14), Color(255, 255, 255), "°C");
      it.printf(150, 64, id(Roboto_14), Color(255, 255, 255), "%%");
      // Adjust % position based on dimmer value (move right for 3-digit numbers)
      if (id(dimmer_percent).state >= 100) {
        it.printf(167, 122, id(Roboto_14), Color(255, 255, 255), "%%");
      } else {
        it.printf(150, 122, id(Roboto_14), Color(255, 255, 255), "%%");
      }

      // Temperature readings with color coding based on ranges
      // Basking temp: <27=amber, 27-28=green, >28=red
      Color bask_color = Color(255, 130, 0); // amber default
      if (id(bask_temp).state >= 27 && id(bask_temp).state <= 28) {
        bask_color = Color(76, 175, 80); // green
      } else if (id(bask_temp).state > 28) {
        bask_color = Color(233, 30, 99); // red
      }
      it.printf(14, 60, id(Roboto_30), bask_color, "%.1f", id(bask_temp).state);
      
      // Middle temp: <27=amber, 27-28=green, >28=red
      Color mid_color = Color(255, 130, 0); // amber default
      if (id(mid_temp).state >= 27 && id(mid_temp).state <= 28) {
        mid_color = Color(76, 175, 80); // green
      } else if (id(mid_temp).state > 28) {
        mid_color = Color(233, 30, 99); // red
      }
      it.printf(14, 117, id(Roboto_30), mid_color, "%.1f", id(mid_temp).state);
      
      // Base temp: <27=amber, 27-28=green, >28=red
      Color base_color = Color(255, 130, 0); // amber default
      if (id(base_temp).state >= 27 && id(base_temp).state <= 28) {
        base_color = Color(76, 175, 80); // green
      } else if (id(base_temp).state > 28) {
        base_color = Color(233, 30, 99); // red
      }
      it.printf(14, 175, id(Roboto_30), base_color, "%.1f", id(base_temp).state);

      it.printf(115, 60, id(Roboto_30), Color(255, 130, 0), "%.0f", id(humidity).state);
      it.printf(115, 117, id(Roboto_30), Color(76, 175, 80), "%.0f", id(dimmer_percent).state);
      it.printf(115, 175, id(Roboto_30), Color(76, 175, 80), "%.1f", id(uv_raw_voltage).state);
      
      // Show moon graphic only when lighting status contains "Moon"
      if (id(lighting_status).state.find("High Moon") != std::string::npos) {
        it.filled_circle(245, 88, 37, Color(238, 238, 238));
      }
      if (id(lighting_status).state.find("Low Moon") != std::string::npos) {
        it.filled_circle(245, 88, 37, Color(189, 189, 189));
      }
      if (id(lighting_status).state.find("Moon") != std::string::npos) {
        it.filled_circle(265, 72, 32, Color(0, 0, 0));
      }

      // Show sun graphic with intensity-based color when lighting status contains "Sun"
      if (id(lighting_status).state.find("Sun") != std::string::npos) {
        if (id(lighting_status).state.find("High Sun") != std::string::npos) {
          it.filled_circle(245, 88, 37, Color(255, 255, 0));  // Bright yellow for High Sun
        } else if (id(lighting_status).state.find("Mid Sun") != std::string::npos) {
          it.filled_circle(245, 88, 37, Color(255, 255, 125)); // Pale yellow for Mid Sun
        } else if (id(lighting_status).state.find("Low Sun") != std::string::npos) {
          it.filled_circle(245, 88, 37, Color(255, 255, 150)); // Very pale yellow for Low Sun
        }
      }

      // Show fogger graphic only when fogger is on
      if (id(fogger_power).state) {
        // Animated fog clouds sweeping left to right
        int fog_offset = (millis() / 80) % 50;  // Sweep animation
        
        // Base fog elements with sweep animation
        it.filled_circle(227 + fog_offset, 102, 13, Color(117, 117, 117));
        it.filled_circle(211 + fog_offset, 111, 10, Color(117, 117, 117));
        it.filled_circle(229 + fog_offset, 104, 13, Color(117, 117, 117));
        it.filled_circle(245 + fog_offset, 111, 10, Color(117, 117, 117));
        it.filled_rectangle(212 + fog_offset, 106, 33, 16, Color(117, 117, 117));
      }

      if (id(mister_power).state) {
        // Animated raindrops moving diagonally from top-right to bottom-left
        int drop_offset = (millis() / 50) % 50;  // Wider cycle for more spread
        
        // Raindrop 1
        int x1 = 255 - drop_offset;
        int y1 = 52 + drop_offset;
        if (x1 >= 180 && y1 <= 140) {
          it.filled_circle(x1, y1, 3, Color(3, 169, 244));
          it.filled_rectangle(x1-1, y1-3, 3, 3, Color(3, 169, 244));
        }
        
        // Raindrop 2 (offset position and timing)
        int x2 = 280 - ((drop_offset + 15) % 60);
        int y2 = 47 + ((drop_offset + 15) % 60);
        if (x2 >= 180 && y2 <= 140) {
          it.filled_circle(x2, y2, 3, Color(3, 169, 244));
          it.filled_rectangle(x2-1, y2-3, 3, 3, Color(3, 169, 244));
        }
        
        // Raindrop 3
        int x3 = 275 - ((drop_offset + 30) % 50);
        int y3 = 57 + ((drop_offset + 30) % 50);
        if (x3 >= 180 && y3 <= 140) {
          it.filled_circle(x3, y3, 3, Color(3, 169, 244));
          it.filled_rectangle(x3-1, y3-3, 3, 3, Color(3, 169, 244));
        }
        
        // Raindrop 4
        int x4 = 265 - ((drop_offset + 45) % 60);
        int y4 = 62 + ((drop_offset + 45) % 60);
        if (x4 >= 180 && y4 <= 140) {
          it.filled_circle(x4, y4, 3, Color(3, 169, 244));
          it.filled_rectangle(x4-1, y4-3, 3, 3, Color(3, 169, 244));
        }
        
        // Raindrop 5
        int x5 = 270 - ((drop_offset + 52) % 60);
        int y5 = 67 + ((drop_offset + 52) % 60);
        if (x5 >= 180 && y5 <= 140) {
          it.filled_circle(x5, y5, 3, Color(3, 169, 244));
          it.filled_rectangle(x5-1, y5-3, 3, 3, Color(3, 169, 244));
        }
      }

      // Show animated wind graphic when fan is on (moved 100px higher)
      if (id(fan_power).state) {
        int offset = (millis() / 50) % 60; 
        it.line(200 + offset, 70, 250 + offset, 70, Color(255, 255, 255));
        it.line(200 + offset, 71, 250 + offset, 71, Color(255, 255, 255));
        it.line(200 + offset, 80, 250 + offset, 80, Color(150, 220, 255));
        it.line(200 + offset, 81, 250 + offset, 81, Color(150, 220, 255));
        it.line(200 + offset, 90, 250 + offset, 90, Color(255, 255, 255));
        it.line(202 + offset, 91, 250 + offset, 91, Color(255, 255, 255));
        it.line(200 + offset, 100, 250 + offset, 100, Color(150, 220, 255));
        it.line(202 + offset, 101, 250 + offset, 101, Color(150, 220, 255));
        it.line(200 + offset, 110, 250 + offset, 110, Color(150, 220, 255));
        it.line(202 + offset, 111, 250 + offset, 111, Color(150, 220, 255));

        int offset2 = (millis() / 70) % 60;
        it.line(200 + offset2, 75, 235 + offset2, 75, Color(80, 180, 255));
        it.line(200 + offset2, 85, 235 + offset2, 85, Color(120, 200, 255));
        it.line(200 + offset2, 95, 235 + offset2, 95, Color(80, 180, 255));
        it.line(200 + offset2, 105, 235 + offset2, 105, Color(80, 180, 255));
        it.line(200 + offset2, 115, 235 + offset2, 115, Color(80, 180, 255));
      }

      it.line(100, 47, 100, 205, Color(255, 255, 255));

# Fonts
font:
  - file: "gfonts://Roboto"
    id: Roboto_14
    size: 14
  - file: "gfonts://Roboto"
    id: Roboto_30
    size: 30
  - file: "gfonts://Roboto"
    id: Roboto
    size: 20